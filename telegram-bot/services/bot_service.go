package services

import (
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type BotService struct {
	Bot              *tgbotapi.BotAPI
	MenuService      *MenuService
	SchedulerService *SchedulerService
}

func (bs *BotService) SendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–ª—É–¥–∞
	time.Sleep(300 * time.Millisecond)

	if _, err := bs.Bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func NewBotService(token string, menuService *MenuService, schedulerService *SchedulerService) (*BotService, error) {
	if token == "" {
		return nil, errors.New("—Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, errors.New("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: " + err.Error())
	}

	bot.Debug = true // –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
	log.Printf("–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	return &BotService{
		Bot:              bot,
		MenuService:      menuService,
		SchedulerService: schedulerService,
	}, nil
}

func (bs *BotService) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bs.Bot.GetUpdatesChan(u)

	log.Println("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
	for update := range updates {
		if update.Message != nil {
			bs.handleMessage(update.Message)
		}
	}
}

func (bs *BotService) handleMessage(msg *tgbotapi.Message) {
	var response string

	switch msg.Command() {
	case "start":
		if bs.SchedulerService != nil {
			bs.SchedulerService.StartScheduling(msg.Chat.ID)
		}
		response = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Ü–∏–æ–Ω–∞.
        
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/settime - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
/times - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/help - –°–ø—Ä–∞–≤–∫–∞`

	case "menu":
		if bs.MenuService != nil {
			response = bs.MenuService.GenerateDailyMenu(msg.Chat.ID)
		} else {
			response = "–°–µ—Ä–≤–∏—Å –º–µ–Ω—é –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
		}

	case "settime":
		response = `–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:
–ü—Ä–∏–º–µ—Ä: /settime breakfast 08:30
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: breakfast, lunch, dinner`

	case "times":
		if bs.SchedulerService != nil && bs.MenuService != nil {
			breakfast, _ := bs.MenuService.GetMealTime(msg.Chat.ID, "breakfast")
			lunch, _ := bs.MenuService.GetMealTime(msg.Chat.ID, "lunch")
			dinner, _ := bs.MenuService.GetMealTime(msg.Chat.ID, "dinner")

			now := time.Now()
			var builder strings.Builder
			builder.WriteString("‚è∞ –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n")

			// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
			calculateNext := func(mealTimeStr string, mealName string) {
				mealTime, _ := time.Parse("15:04", mealTimeStr)
				next := time.Date(now.Year(), now.Month(), now.Day(),
					mealTime.Hour(), mealTime.Minute(), 0, 0, now.Location())

				if next.Before(now) {
					next = next.Add(24 * time.Hour)
					builder.WriteString(fmt.Sprintf("%s: %s (–∑–∞–≤—Ç—Ä–∞, —á–µ—Ä–µ–∑ %v)\n",
						mealName, mealTimeStr, next.Sub(now).Round(time.Minute)))
				} else {
					builder.WriteString(fmt.Sprintf("%s: %s (—Å–µ–≥–æ–¥–Ω—è, —á–µ—Ä–µ–∑ %v)\n",
						mealName, mealTimeStr, next.Sub(now).Round(time.Minute)))
				}
			}

			calculateNext(breakfast, "üç≥ –ó–∞–≤—Ç—Ä–∞–∫")
			calculateNext(lunch, "üç≤ –û–±–µ–¥")
			calculateNext(dinner, "üçΩ –£–∂–∏–Ω")

			response = builder.String()
		} else {
			response = "–°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
		}

	case "help":
		response = `–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/menu - –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/settime - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
/times - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞`

	default:
		parts := strings.Fields(msg.Text)
		if len(parts) == 2 {
			mealType := strings.ToLower(parts[0])
			timeStr := parts[1]

			validMealTypes := map[string]bool{"breakfast": true, "lunch": true, "dinner": true}

			if validMealTypes[mealType] {
				notice, err := bs.MenuService.SetMealTime(msg.Chat.ID, mealType, timeStr)
				if err != nil {
					response = "‚ùå " + err.Error()
				} else {
					// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
					breakfast, _ := bs.MenuService.GetMealTime(msg.Chat.ID, "breakfast")
					lunch, _ := bs.MenuService.GetMealTime(msg.Chat.ID, "lunch")
					dinner, _ := bs.MenuService.GetMealTime(msg.Chat.ID, "dinner")

					response = fmt.Sprintf(`‚úÖ –í—Ä–µ–º—è –¥–ª—è %s —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ %s%s

–í–∞—à–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:
üç≥ –ó–∞–≤—Ç—Ä–∞–∫: %s
üç≤ –û–±–µ–¥: %s
üçΩ –£–∂–∏–Ω: %s`,
						mealType, timeStr, notice, breakfast, lunch, dinner)
				}
			} else {
				response = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ: breakfast, lunch, dinner"
			}
		} else {
			response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
		}
	}

	bs.SendMessage(msg.Chat.ID, response)
}
