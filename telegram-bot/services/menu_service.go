package services

import (
	"accses"
	"fmt"
	"log"
	"math/rand"
	"strings"
	"time"
)

type MenuService struct {
	randSource     *rand.Rand
	previousDishes map[string]string
	userMealTimes  map[int64]map[string]string
}

func NewMenuService() *MenuService {
	return &MenuService{
		randSource:     rand.New(rand.NewSource(time.Now().UnixNano())),
		previousDishes: make(map[string]string),
		userMealTimes:  make(map[int64]map[string]string),
	}
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (ms *MenuService) SetMealTime(userID int64, mealType, timeStr string) (string, error) {
	// –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ñ–æ—Ä–º–∞—Ç–∞
	mealTime, err := time.Parse("15:04", timeStr)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏
	if mealTime.Hour() > 23 || mealTime.Minute() > 59 {
		return "", fmt.Errorf("–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤—Ä–µ–º—è. –ú–∞–∫—Å–∏–º—É–º 23:59")
	}

	// –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
	now := time.Now()
	currentTime := time.Date(now.Year(), now.Month(), now.Day(), now.Hour(), now.Minute(), 0, 0, now.Location())
	scheduledTime := time.Date(now.Year(), now.Month(), now.Day(), mealTime.Hour(), mealTime.Minute(), 0, 0, now.Location())

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
	switch mealType {
	case "breakfast":
		if mealTime.Hour() < 3 || mealTime.Hour() > 11 {
			return "", fmt.Errorf("—Å—Ç—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞ (%s). –û–±—ã—á–Ω–æ –º–µ–∂–¥—É 05:00 –∏ 11:00", timeStr)
		}
	case "lunch":
		if mealTime.Hour() < 11 || mealTime.Hour() > 16 {
			return "", fmt.Errorf("—Å—Ç—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±–µ–¥–∞ (%s). –û–±—ã—á–Ω–æ –º–µ–∂–¥—É 12:00 –∏ 15:00", timeStr)
		}
	case "dinner":
		if mealTime.Hour() < 16 || mealTime.Hour() > 23 {
			return "", fmt.Errorf("—Å—Ç—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É–∂–∏–Ω–∞ (%s). –û–±—ã—á–Ω–æ –º–µ–∂–¥—É 17:00 –∏ 22:00", timeStr)
		}
	default:
		return "", fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏: %s", mealType)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è
	var notice string
	if scheduledTime.Before(currentTime) {
		scheduledTime = scheduledTime.Add(24 * time.Hour)
		notice = fmt.Sprintf("\n‚ö† –ó–∞–º–µ—Ç–∫–∞: –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–æ—ç—Ç–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞ –≤ %s", timeStr)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è map –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if ms.userMealTimes[userID] == nil {
		ms.userMealTimes[userID] = make(map[string]string)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞)
	ms.userMealTimes[userID][mealType] = timeStr

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
	log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä–µ–º—è %s –Ω–∞ %s", userID, mealType, timeStr)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ (–µ—Å–ª–∏ –±—ã–ª–æ)
	return notice, nil
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
func (ms *MenuService) GetMealTime(userID int64, mealType string) (string, error) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
	validMealTypes := map[string]bool{
		"breakfast": true,
		"lunch":     true,
		"dinner":    true,
	}

	if !validMealTypes[mealType] {
		return "", fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏: %s", mealType)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º–µ–Ω–∏
	if userTimes, ok := ms.userMealTimes[userID]; ok {
		if timeStr, ok := userTimes[mealType]; ok {
			// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
			if _, err := time.Parse("15:04", timeStr); err != nil {
				return "", fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: %s", timeStr)
			}
			return timeStr, nil
		}
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –≤ –ª–æ–≥
	defaultTimes := map[string]string{
		"breakfast": "08:00",
		"lunch":     "13:00",
		"dinner":    "19:00",
	}

	defaultTime := defaultTimes[mealType]
	log.Printf("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d, –ø—Ä–∏–µ–º –ø–∏—â–∏: %s - %s",
		userID, mealType, defaultTime)

	return defaultTime, nil
}

func (ms *MenuService) GetNextMealTime(userID int64, mealType string) (time.Time, error) {
	timeStr, err := ms.GetMealTime(userID, mealType)
	if err != nil {
		return time.Time{}, err
	}

	mealTime, _ := time.Parse("15:04", timeStr)
	now := time.Now()
	next := time.Date(now.Year(), now.Month(), now.Day(),
		mealTime.Hour(), mealTime.Minute(), 0, 0, now.Location())

	if next.Before(now) {
		next = next.Add(24 * time.Hour)
	}

	return next, nil
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å
func (ms *MenuService) GenerateDailyMenu(userID int64) string {
	var builder strings.Builder

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
	breakfastTime, _ := ms.GetMealTime(userID, "breakfast")
	lunchTime, _ := ms.GetMealTime(userID, "lunch")
	dinnerTime, _ := ms.GetMealTime(userID, "dinner")

	builder.WriteString("üçΩ –í–∞—à–µ –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n")

	// –ó–∞–≤—Ç—Ä–∞–∫
	builder.WriteString("üåÖ –ó–∞–≤—Ç—Ä–∞–∫ (" + breakfastTime + "):\n")
	builder.WriteString(strings.Join(ms.GenerateBreakfast(), "\n"))

	// –û–±–µ–¥
	builder.WriteString("\n\n‚òÄ –û–±–µ–¥ (" + lunchTime + "):\n")
	builder.WriteString(strings.Join(ms.GenerateLunch(), "\n"))

	// –£–∂–∏–Ω
	builder.WriteString("\n\nüåô –£–∂–∏–Ω (" + dinnerTime + "):\n")
	builder.WriteString(strings.Join(ms.GenerateDinner(), "\n"))

	// –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
	builder.WriteString("\n\n‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n")
	builder.WriteString(fmt.Sprintf("–ó–∞–≤—Ç—Ä–∞–∫: %s\n–û–±–µ–¥: %s\n–£–∂–∏–Ω: %s",
		breakfastTime,
		lunchTime,
		dinnerTime))

	return builder.String()
}

func (ms *MenuService) getRandomDish(list []string, mealType string) string {
	previous := ms.previousDishes[mealType]

	for i := 0; i < 100; i++ { // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
		item := list[ms.randSource.Intn(len(list))]
		if item != previous {
			ms.previousDishes[mealType] = item
			return item
		}
	}
	return list[0] // fallback
}

func (ms *MenuService) getRandomDrink() string {
	drinkLists := [][]string{
		accses.Brakfast1[2:9:9],  // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ø–∏—Ç–∫–∏ –∏–∑ –∑–∞–≤—Ç—Ä–∞–∫–∞ 1
		accses.Breakfast2[3:6:6], // –ù–∞–ø–∏—Ç–∫–∏ –∏–∑ –∑–∞–≤—Ç—Ä–∞–∫–∞ 2
		accses.Lunch[2:12:12],    // –ù–∞–ø–∏—Ç–∫–∏ –∏–∑ –æ–±–µ–¥–∞
		accses.Dinner[2:12:12],   // –ù–∞–ø–∏—Ç–∫–∏ –∏–∑ —É–∂–∏–Ω–∞
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–ø–∏—Ç–∫–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
	var allDrinks []string
	for _, drinks := range drinkLists {
		allDrinks = append(allDrinks, drinks...)
	}

	if len(allDrinks) == 0 {
		return "–ß–∞–π" // fallback
	}
	return allDrinks[ms.randSource.Intn(len(allDrinks))]
}

func (ms *MenuService) generateMeal(courseGroups [][]string, count int, mealType string) []string {
	var result []string
	var liquidItems []string
	liquidKeywords := []string{"—á–∞–π", "–∫–æ–º–ø–æ—Ç", "–∫–∏—Å–µ–ª—å", "–∫–µ—Ñ–∏—Ä", "—Ä—è–∂–µ–Ω–∫–∞"}

	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∂–∏–¥–∫–æ—Å—Ç–∏
	for _, group := range courseGroups {
		for _, item := range group {
			for _, keyword := range liquidKeywords {
				if strings.Contains(strings.ToLower(item), keyword) {
					liquidItems = append(liquidItems, item)
					break
				}
			}
		}
	}

	usedLiquids := make(map[string]bool)

	for i := 0; i < len(courseGroups) && len(result) < count; i++ {
		group := courseGroups[i]
		if len(group) == 0 {
			continue
		}

		maxAttempts := 10
		for attempts := 0; attempts < maxAttempts; attempts++ {
			item := group[rand.Intn(len(group))]

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–ª—é–¥–æ –∂–∏–¥–∫–æ—Å—Ç—å—é
			isLiquid := false
			for _, keyword := range liquidKeywords {
				if strings.Contains(strings.ToLower(item), keyword) {
					isLiquid = true
					break
				}
			}

			// –ï—Å–ª–∏ —ç—Ç–æ –∂–∏–¥–∫–æ—Å—Ç—å –∏ –æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			if isLiquid && usedLiquids[item] {
				continue
			}

			// –ï—Å–ª–∏ —ç—Ç–æ –∂–∏–¥–∫–æ—Å—Ç—å, –æ—Ç–º–µ—á–∞–µ–º –µ–µ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
			if isLiquid {
				usedLiquids[item] = true
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –Ω–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–µ–π
			duplicateLiquid := false
			if isLiquid {
				for _, resItem := range result {
					for _, keyword := range liquidKeywords {
						if strings.Contains(strings.ToLower(resItem), keyword) {
							duplicateLiquid = true
							break
						}
					}
					if duplicateLiquid {
						break
					}
				}
			}

			if !duplicateLiquid {
				result = append(result, item)
				break
			}
		}
	}

	// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥, –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
	if len(result) < count {
		for i := 0; i < len(courseGroups) && len(result) < count; i++ {
			group := courseGroups[i]
			if len(group) == 0 {
				continue
			}

			item := group[rand.Intn(len(group))]
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ –±–ª—é–¥–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
			exists := false
			for _, resItem := range result {
				if resItem == item {
					exists = true
					break
				}
			}
			if !exists {
				result = append(result, item)
			}
		}
	}

	return result
}

func (ms *MenuService) GenerateLunch() []string {
	mainCourses := [][]string{
		accses.Lunch[:6],   // –ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞
		accses.Lunch[6:12], // –í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞
	}
	return ms.generateMeal(mainCourses, 2, "lunch")
}

func (ms *MenuService) GenerateBreakfast() []string {
	mainCourses := [][]string{
		accses.Brakfast1,  // –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞
		accses.Breakfast2, // –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞
	}
	return ms.generateMeal(mainCourses, 2, "breakfast")
}

func (ms *MenuService) GenerateDinner() []string {
	mainCourses := [][]string{
		accses.Dinner[:6],   // –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞
		accses.Dinner[6:12], // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª—é–¥–∞
	}
	return ms.generateMeal(mainCourses, 2, "dinner")
}
