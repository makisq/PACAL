// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: core/command.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommandModule_GetCommands_FullMethodName              = "/core.CommandModule/GetCommands"
	CommandModule_RunCommand_FullMethodName               = "/core.CommandModule/RunCommand"
	CommandModule_PreRunCommand_FullMethodName            = "/core.CommandModule/PreRunCommand"
	CommandModule_PostRunCommand_FullMethodName           = "/core.CommandModule/PostRunCommand"
	CommandModule_PersistentPreRunCommand_FullMethodName  = "/core.CommandModule/PersistentPreRunCommand"
	CommandModule_PersistentPostRunCommand_FullMethodName = "/core.CommandModule/PersistentPostRunCommand"
	CommandModule_Init_FullMethodName                     = "/core.CommandModule/Init"
	CommandModule_Name_FullMethodName                     = "/core.CommandModule/Name"
	CommandModule_Version_FullMethodName                  = "/core.CommandModule/Version"
)

// CommandModuleClient is the client API for CommandModule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandModuleClient interface {
	// Command management
	GetCommands(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandsResponse, error)
	RunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*Empty, error)
	PreRunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*Empty, error)
	PostRunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*Empty, error)
	PersistentPreRunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*Empty, error)
	PersistentPostRunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*Empty, error)
	// Plugin management
	Init(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Empty, error)
	Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NameResponse, error)
	Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error)
}

type commandModuleClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandModuleClient(cc grpc.ClientConnInterface) CommandModuleClient {
	return &commandModuleClient{cc}
}

func (c *commandModuleClient) GetCommands(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandsResponse)
	err := c.cc.Invoke(ctx, CommandModule_GetCommands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandModuleClient) RunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CommandModule_RunCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandModuleClient) PreRunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CommandModule_PreRunCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandModuleClient) PostRunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CommandModule_PostRunCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandModuleClient) PersistentPreRunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CommandModule_PersistentPreRunCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandModuleClient) PersistentPostRunCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CommandModule_PersistentPostRunCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandModuleClient) Init(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CommandModule_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandModuleClient) Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, CommandModule_Name_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandModuleClient) Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, CommandModule_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandModuleServer is the server API for CommandModule service.
// All implementations must embed UnimplementedCommandModuleServer
// for forward compatibility.
type CommandModuleServer interface {
	// Command management
	GetCommands(context.Context, *Empty) (*CommandsResponse, error)
	RunCommand(context.Context, *CommandRequest) (*Empty, error)
	PreRunCommand(context.Context, *CommandRequest) (*Empty, error)
	PostRunCommand(context.Context, *CommandRequest) (*Empty, error)
	PersistentPreRunCommand(context.Context, *CommandRequest) (*Empty, error)
	PersistentPostRunCommand(context.Context, *CommandRequest) (*Empty, error)
	// Plugin management
	Init(context.Context, *Config) (*Empty, error)
	Name(context.Context, *Empty) (*NameResponse, error)
	Version(context.Context, *Empty) (*VersionResponse, error)
	mustEmbedUnimplementedCommandModuleServer()
}

// UnimplementedCommandModuleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommandModuleServer struct{}

func (UnimplementedCommandModuleServer) GetCommands(context.Context, *Empty) (*CommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommands not implemented")
}
func (UnimplementedCommandModuleServer) RunCommand(context.Context, *CommandRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCommand not implemented")
}
func (UnimplementedCommandModuleServer) PreRunCommand(context.Context, *CommandRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreRunCommand not implemented")
}
func (UnimplementedCommandModuleServer) PostRunCommand(context.Context, *CommandRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRunCommand not implemented")
}
func (UnimplementedCommandModuleServer) PersistentPreRunCommand(context.Context, *CommandRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersistentPreRunCommand not implemented")
}
func (UnimplementedCommandModuleServer) PersistentPostRunCommand(context.Context, *CommandRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersistentPostRunCommand not implemented")
}
func (UnimplementedCommandModuleServer) Init(context.Context, *Config) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedCommandModuleServer) Name(context.Context, *Empty) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedCommandModuleServer) Version(context.Context, *Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedCommandModuleServer) mustEmbedUnimplementedCommandModuleServer() {}
func (UnimplementedCommandModuleServer) testEmbeddedByValue()                       {}

// UnsafeCommandModuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandModuleServer will
// result in compilation errors.
type UnsafeCommandModuleServer interface {
	mustEmbedUnimplementedCommandModuleServer()
}

func RegisterCommandModuleServer(s grpc.ServiceRegistrar, srv CommandModuleServer) {
	// If the following call pancis, it indicates UnimplementedCommandModuleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommandModule_ServiceDesc, srv)
}

func _CommandModule_GetCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandModuleServer).GetCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandModule_GetCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandModuleServer).GetCommands(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandModule_RunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandModuleServer).RunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandModule_RunCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandModuleServer).RunCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandModule_PreRunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandModuleServer).PreRunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandModule_PreRunCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandModuleServer).PreRunCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandModule_PostRunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandModuleServer).PostRunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandModule_PostRunCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandModuleServer).PostRunCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandModule_PersistentPreRunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandModuleServer).PersistentPreRunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandModule_PersistentPreRunCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandModuleServer).PersistentPreRunCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandModule_PersistentPostRunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandModuleServer).PersistentPostRunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandModule_PersistentPostRunCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandModuleServer).PersistentPostRunCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandModule_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandModuleServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandModule_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandModuleServer).Init(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandModule_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandModuleServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandModule_Name_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandModuleServer).Name(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandModule_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandModuleServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandModule_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandModuleServer).Version(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandModule_ServiceDesc is the grpc.ServiceDesc for CommandModule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandModule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.CommandModule",
	HandlerType: (*CommandModuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommands",
			Handler:    _CommandModule_GetCommands_Handler,
		},
		{
			MethodName: "RunCommand",
			Handler:    _CommandModule_RunCommand_Handler,
		},
		{
			MethodName: "PreRunCommand",
			Handler:    _CommandModule_PreRunCommand_Handler,
		},
		{
			MethodName: "PostRunCommand",
			Handler:    _CommandModule_PostRunCommand_Handler,
		},
		{
			MethodName: "PersistentPreRunCommand",
			Handler:    _CommandModule_PersistentPreRunCommand_Handler,
		},
		{
			MethodName: "PersistentPostRunCommand",
			Handler:    _CommandModule_PersistentPostRunCommand_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _CommandModule_Init_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _CommandModule_Name_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _CommandModule_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/command.proto",
}
