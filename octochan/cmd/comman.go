package cmd

import (
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"octochan/core"
	"os"
	"os/exec"
	"path/filepath"
	plug "plugin"
	"strings"
	"time"

	"github.com/fsnotify/fsnotify"
	"github.com/hashicorp/go-plugin"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"gopkg.in/natefinch/lumberjack.v2"
)

var (
	cfgFile  string
	scenario string
	fastMode bool
)

type PipelineCommand interface {
	Execute(input io.Reader, output io.Writer) error
}

type Pipeline struct {
	commands []PipelineCommand
}

func (p *Pipeline) AddCommand(cmd PipelineCommand) {
	p.commands = append(p.commands, cmd)
}

func (p *Pipeline) Run() error {
	if len(p.commands) == 0 {
		return fmt.Errorf("–Ω–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
	}

	var prevOut io.ReadCloser
	defer func() {
		if prevOut != nil {
			prevOut.Close()
		}
	}()

	firstCmd := p.commands[0]
	lastIdx := len(p.commands) - 1

	if len(p.commands) == 1 {
		return firstCmd.Execute(os.Stdin, os.Stdout)
	}

	for i, cmd := range p.commands[:lastIdx] {
		pr, pw := io.Pipe()
		defer pw.Close()

		go func(cmd PipelineCommand, i int, r io.Reader, w io.WriteCloser) {
			defer w.Close()
			if err := cmd.Execute(r, w); err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ %d: %v\n", i+1, err)
			}
		}(cmd, i, getInput(i, prevOut), pw)

		prevOut = pr
	}

	return p.commands[lastIdx].Execute(prevOut, os.Stdout)
}

func getInput(index int, prevOut io.Reader) io.Reader {
	if index == 0 {
		return os.Stdin
	}
	return prevOut
}

var diffCmd = &cobra.Command{
	Use:   "diff <file1> <file2>",
	Short: "–°—Ä–∞–≤–Ω–∏—Ç—å –¥–≤–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞",
	Args:  cobra.ExactArgs(2),
	Run: func(cmd *cobra.Command, args []string) {
		scriptDir, err := core.GetScriptDir()
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: %v\n", err)
			return
		}

		reportsDir := filepath.Join(scriptDir, "reports")
		snapshotsDir := filepath.Join(scriptDir, "snapshots")
		for _, dir := range []string{reportsDir, snapshotsDir} {
			if err := os.MkdirAll(dir, 0755); err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ %s: %v\n", dir, err)
				return
			}
		}

		file1 := resolveInputPath(args[0], scriptDir, reportsDir)
		file2 := resolveInputPath(args[1], scriptDir, reportsDir)

		if !core.FileExists(file1) || !core.FileExists(file2) {
			fmt.Printf("–û–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω\n")
			return
		}

		content1, _ := core.ReadFile(file1)
		content2, _ := core.ReadFile(file2)
		cfg1, _ := core.ParseConfig(content1)
		cfg2, _ := core.ParseConfig(content2)

		diff := core.CompareConfigs(cfg1, cfg2, file1, file2)

		if len(diff) == 0 {
			fmt.Println("–§–∞–π–ª—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã!")
			return
		}

		if fastMode {
			fmt.Println("–ù–∞–π–¥–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è (fast mode):")
			for param, vals := range diff {
				fmt.Printf("%s: %s -> %s\n", param, vals[file1], vals[file2])
			}
			return
		}

		fmt.Println("–ù–∞–π–¥–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è:")
		for param, vals := range diff {
			fmt.Printf("%s:\n  %s -> %s\n", param, vals[file1], vals[file2])
		}

		reportNum, _ := core.GetNextReportNumber(reportsDir)
		outputFile := filepath.Join(reportsDir, fmt.Sprintf("diff_report_%d.txt", reportNum))
		core.SaveDiffToFile(diff, outputFile, file1, file2)
		fmt.Printf("\n–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: %s\n", outputFile)

		snapshot, err := core.CreateSnapshot(nil, cfg1, cfg2, "system", "autogenerated")
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–∞: %v\n", err)
			return
		}
		if err := core.SaveSnapshot(snapshot, snapshotsDir); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–∞: %v\n", err)
			return
		}
		fmt.Printf("–°–Ω–∞–ø—à–æ—Ç —Å–æ–∑–¥–∞–Ω: %s\n", snapshot.ID)
	},
}

var saveScenarioCmd = &cobra.Command{
	Use:   "srs <scenario.yaml>",
	Short: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ –±–∏–Ω–∞—Ä–Ω–∏–∫",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		scenarioPath := args[0]
		data, err := os.ReadFile(scenarioPath)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
			return
		}

		fm, err := core.NewFileManager()
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: %v\n", err)
			return
		}

		scenarioName := strings.TrimSuffix(filepath.Base(scenarioPath), ".yaml")
		if err := fm.SaveScenario(scenarioName, data); err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v\n", err)
			return
		}

		// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ BaseDir()
		savePath := filepath.Join(fm.BaseDir(), scenarioName+".bin")
		fmt.Printf("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω: %s\n", savePath)
	},
}

var applyCmd = &cobra.Command{
	Use:   "apply [-rlm] <file> [custom_params...]",
	Short: "–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
	Long: `–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–ª–∞–≥–æ–≤.
–° —Ñ–ª–∞–≥–æ–º -rlm —Ä–∞–±–æ—Ç–∞–µ—Ç —Å RLM —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏. –î–ª—è RLM —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ key=value.`,
	Args: cobra.MinimumNArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		useRLM, _ := cmd.Flags().GetBool("rlm")

		if useRLM {
			log.Println("=== Starting new apply operation ===")
			defer log.Println("=== Apply operation completed ===")

			customParams := make(map[string]string)
			if len(args) > 1 {
				for _, param := range args[1:] {
					parts := strings.SplitN(param, "=", 2)
					if len(parts) == 2 {
						customParams[parts[0]] = parts[1]
						log.Printf("Added custom param: %s=%s", parts[0], parts[1])
					} else {
						log.Printf("‚ö†Ô∏è Invalid parameter format: %s", param)
					}
				}
			}

			token := viper.GetString("defaults.api_token")
			if token == "" {
				fmt.Println("‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'auth' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞")
				return
			}
			taskIDs, err := core.ExecuteScenarioFromFile(args[0], customParams)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: %v\n", err)
				return
			}
			fmt.Println("‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
			for _, taskID := range taskIDs {
				fmt.Printf("- %s\n", taskID)
			}

			if viper.GetBool("defaults.auto_check_status") {
				fmt.Println("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á...")
				for _, taskID := range taskIDs {
					status, err := core.GetTaskStatus(taskID)
					if err != nil {
						fmt.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ %s: %v\n", taskID, err)
					} else {
						fmt.Printf("- %s: %s\n", taskID, status["status"])
					}
				}
			}
		} else {
			fmt.Println("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞...")
		}
	},
}

func resolveInputPath(inputPath, scriptDir, reportsDir string) string {

	if filepath.IsAbs(inputPath) {
		return inputPath
	}

	if core.FileExists(inputPath) {
		return inputPath
	}

	scriptPath := filepath.Join(scriptDir, inputPath)
	if core.FileExists(scriptPath) {
		return scriptPath
	}

	reportsPath := filepath.Join(reportsDir, inputPath)
	if core.FileExists(reportsPath) {
		return reportsPath
	}

	return inputPath
}

var listModulesCmd = &cobra.Command{
	Use:   "modules",
	Short: "–ü–æ–∫–∞–∑–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏",
	Run: func(cmd *cobra.Command, args []string) {
		fm, _ := core.NewFileManager()
		files, _ := os.ReadDir(fm.ModulesDir())
		for _, f := range files {
			fmt.Println(f.Name())
		}
	},
}

var logsCmd = &cobra.Command{
	Use:   "logs [--tail N]",
	Short: "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏",
	Run: func(cmd *cobra.Command, args []string) {
		tail, _ := cmd.Flags().GetInt("tail")
		showLogs(tail)
	},
}

var findCmd = &cobra.Command{
	Use:   "find <file> <parameter>",
	Short: "–ù–∞–π—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–Ω—Ñ–∏–≥–µ",
	Run: func(cmd *cobra.Command, args []string) {
		content, _ := os.ReadFile(args[0])
		cfg, _ := core.ParseConfig(string(content))

		for section, params := range cfg {
			if val, ok := params[args[1]]; ok {
				fmt.Printf("[%s] %s = %v\n", section, args[1], val)
			}
		}
	},
}

var installCmd = &cobra.Command{
	Use:   "!install <module_file>",
	Short: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –∫–æ–º–∞–Ω–¥",
	Long: `–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥—É–ª—å –∫–æ–º–∞–Ω–¥ –∏–∑ —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ .hcplugin –ø–ª–∞–≥–∏–Ω—ã,
–∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç Hashicorp plugin system –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.`,
	Args: cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		filePath := args[0]

		// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
		if !strings.HasSuffix(filePath, ".hcplugin") {
			cmd.PrintErrln("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .hcplugin –º–æ–¥—É–ª–∏")
			return
		}

		// 2. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
		data, err := os.ReadFile(filePath)
		if err != nil {
			cmd.PrintErrf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –º–æ–¥—É–ª—è: %v\n", err)
			return
		}

		// 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
		fm, err := core.NewFileManager()
		if err != nil {
			cmd.PrintErrf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: %v\n", err)
			return
		}

		moduleName := filepath.Base(filePath)

		// 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è
		if err := fm.InstallHashicorpModule(moduleName, data); err != nil {
			cmd.PrintErrf("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è: %v\n", err)
			return
		}

		// 5. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è
		modulePath := filepath.Join(fm.ModulesDir(), moduleName)
		if err := core.GetModuleManager().LoadHashicorpPlugin(modulePath); err != nil {
			cmd.PrintErrf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–≥–∏–Ω–∞: %v\n", err)

			// –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Ä–∞–±–æ—á–∏–π –º–æ–¥—É–ª—å
			if removeErr := os.Remove(modulePath); removeErr != nil {
				cmd.PrintErrf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–µ—Ä–∞–±–æ—á–∏–π –º–æ–¥—É–ª—å: %v\n", removeErr)
			}
			return
		}

		// 6. –û—Ç—á–µ—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ
		cmd.Printf("‚úÖ –ú–æ–¥—É–ª—å [%s] —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω\n", moduleName)
	},
}
var helpCmd = &cobra.Command{
	Use:   "help",
	Short: "–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥",
	Long: `–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
–∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏`,
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
		fmt.Println("------------------")

		for _, subCmd := range rootCmd.Commands() {
			fmt.Printf("%-10s - %s\n", subCmd.Use, subCmd.Short)

			if subCmd.Example != "" {
				fmt.Printf("  –ü—Ä–∏–º–µ—Ä: %s\n", subCmd.Example)
			}
		}
	},
}

var patchCmd = &cobra.Command{
	Use:   "patch <base_file> <changes_file>",
	Short: "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É",
	Run: func(cmd *cobra.Command, args []string) {
		content1, err := core.ReadFile(args[0])
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
			return
		}

		content2, err := core.ReadFile(args[1])
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
			return
		}

		base, err := core.ParseConfig(content1)
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: %v\n", err)
			return
		}

		changes, err := core.ParseConfig(content2)
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: %v\n", err)
			return
		}

		for section, params := range changes {
			if _, exists := base[section]; !exists {
				base[section] = make(map[string]string)
			}
			for k, v := range params {
				base[section][k] = v
			}
		}

		if err := core.SaveConfig(base, "patched.conf"); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v\n", err)
			return
		}
		fmt.Println("–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ patched.conf")
	},
}

var authCmd = &cobra.Command{
	Use:   "auth <token>",
	Short: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ RLM API",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		initConfig()

		viper.Set("defaults.api_token", args[0])
		if err := viper.WriteConfig(); err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %v\n", err)
			return
		}
		fmt.Println("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
	},
}
var statusCmd = &cobra.Command{
	Use:   "status <task_id>",
	Short: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏",
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		taskID := args[0]
		if err := core.PrintTaskStatus(taskID); err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
			return
		}
	},
}

var statsCmd = &cobra.Command{
	Use:   "stats <file>",
	Short: "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–≥–∞",
	Run: func(cmd *cobra.Command, args []string) {
		content, err := core.ReadFile(args[0])
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
			return
		}

		cfg, err := core.ParseConfig(content)
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: %v\n", err)
			return
		}

		fmt.Printf("–°–µ–∫—Ü–∏–π: %d\n", len(cfg))
		totalParams := 0
		for _, params := range cfg {
			totalParams += len(params)
		}
		fmt.Printf("–ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: %d\n", totalParams)
	},
}
var validateCmd = &cobra.Command{
	Use:   "validate <file>",
	Short: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ –æ—à–∏–±–∫–∏",
	Run: func(cmd *cobra.Command, args []string) {
		content, _ := os.ReadFile(args[0])
		_, err := core.ParseConfig(string(content))
		if err != nil {
			fmt.Printf(" –û—à–∏–±–∫–∞: %v\n", err)
			return
		}
		fmt.Println("–ö–æ–Ω—Ñ–∏–≥ –≤–∞–ª–∏–¥–µ–Ω")
	},
}

func initConfig() {
	home, err := os.UserHomeDir()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v\n", err)
		return
	}

	dirs := []string{
		filepath.Join(home, ".octochan"),
		filepath.Join(home, ".octochan", "scenarios"),
		filepath.Join(home, ".octochan", "reports"),
		filepath.Join(home, ".octochan", "snapshots"),
		filepath.Join(home, ".octochan", "logs"),
		filepath.Join(home, "octochan"),
	}

	for _, dir := range dirs {
		if err := os.MkdirAll(dir, 0755); err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ %s: %v\n", dir, err)
			return
		}
	}

	cfgPath := filepath.Join(home, "octochan", "config.yaml")
	viper.SetConfigFile(cfgPath)

	if _, err := os.Stat(cfgPath); os.IsNotExist(err) {
		viper.Set("defaults.api_url", "https://rlm.sigma.sbrf.ru/api/tasks.json")
		viper.Set("defaults.scenario_path", filepath.Join(home, ".octochan", "scenarios"))
		viper.Set("defaults.auto_check_status", false)
		viper.Set("defaults.max_parallel_tasks", 5)
		viper.Set("defaults.log_path", filepath.Join(home, ".octochan", "logs"))
		viper.Set("defaults.log_max_size", 10)
		viper.Set("defaults.log_max_backups", 5)
		if err := viper.WriteConfig(); err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: %v\n", err)
		}
	}

	if err := viper.ReadInConfig(); err == nil {
		fmt.Println("‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥:", viper.ConfigFileUsed())
	}
}
func showLogs(tail int) {
	logPath := viper.GetString("defaults.log_path")
	if logPath == "" {
		home, _ := os.UserHomeDir()
		logPath = filepath.Join(home, ".octochan", "logs")
	}

	logFile := filepath.Join(logPath, "octochan.log")

	if _, err := os.Stat(logFile); os.IsNotExist(err) {
		fmt.Println("‚ÑπÔ∏è –õ–æ–≥-—Ñ–∞–π–ª –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
		return
	}

	content, err := ioutil.ReadFile(logFile)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: %v\n", err)
		return
	}

	lines := strings.Split(string(content), "\n")

	if tail <= 0 || tail >= len(lines) {
		fmt.Println(string(content))
		return
	}

	start := len(lines) - tail
	if start < 0 {
		start = 0
	}

	fmt.Println("–ü–æ—Å–ª–µ–¥–Ω–∏–µ", tail, "—Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:")
	for _, line := range lines[start:] {
		fmt.Println(line)
	}
}

func initLogger() {
	logPath := viper.GetString("defaults.log_path")
	if logPath == "" {
		home, _ := os.UserHomeDir()
		logPath = filepath.Join(home, ".octochan", "logs")
	}

	if err := os.MkdirAll(logPath, 0755); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤: %v\n", err)
		os.Exit(1)
	}

	logFile := filepath.Join(logPath, "rlm-cli.log")
	writer := &lumberjack.Logger{
		Filename:   logFile,
		MaxSize:    viper.GetInt("defaults.log_max_size"),
		MaxBackups: viper.GetInt("defaults.log_max_backups"),
		Compress:   true,
	}

	log.SetOutput(io.MultiWriter(os.Stdout, writer))
	log.SetFlags(log.LstdFlags | log.Lshortfile)
}

func watchModules() {
	fm, err := core.NewFileManager()
	if err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å FileManager: %v", err)
		return
	}

	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å watcher: %v", err)
		return
	}
	defer watcher.Close()

	err = watcher.Add(fm.ModulesDir())
	if err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: %v", err)
		return
	}

	log.Println("üîç –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –º–æ–¥—É–ª–µ–π –∑–∞–ø—É—â–µ–Ω–æ")

	for {
		select {
		case event, ok := <-watcher.Events:
			if !ok {
				return
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è .hcplugin —Ñ–∞–π–ª–æ–≤
			if event.Op&fsnotify.Write == fsnotify.Write &&
				strings.HasSuffix(event.Name, ".hcplugin") {
				log.Printf("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥—É–ª—è: %s", event.Name)

				// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å
				if err := core.GetModuleManager().LoadHashicorpPlugin(event.Name); err != nil {
					log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å %s: %v", event.Name, err)
				} else {
					log.Printf("‚úÖ –ú–æ–¥—É–ª—å %s —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω", event.Name)
				}
			}

		case err, ok := <-watcher.Errors:
			if !ok {
				return
			}
			log.Printf("–û—à–∏–±–∫–∞ watcher: %v", err)
		}
	}
}

func CheckModule(path string) error {
	plug, err := plug.Open(path)
	if err != nil {
		return err
	}

	symbols, err := plug.Lookup("")
	if err != nil {
		return err
	}

	fmt.Printf("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –º–æ–¥—É–ª–µ %s:\n", path)
	for name := range symbols.(map[string]interface{}) {
		fmt.Println("-", name)
	}
	return nil
}

func inspectModule(path string) error {
	// –¢–æ–ª—å–∫–æ –¥–ª—è .hcplugin –º–æ–¥—É–ª–µ–π
	if !strings.HasSuffix(path, ".hcplugin") {
		return fmt.Errorf("–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .hcplugin –º–æ–¥—É–ª–∏")
	}

	// –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	client := plugin.NewClient(&plugin.ClientConfig{
		HandshakeConfig: plugin.HandshakeConfig{
			ProtocolVersion:  1,
			MagicCookieKey:   "OCTOCHAN_PLUGIN",
			MagicCookieValue: "octochan-2025",
		},
		Plugins:      map[string]plugin.Plugin{"command": &core.CommandPlugin{}},
		Cmd:          exec.Command(path),
		StartTimeout: 10 * time.Second,
	})
	defer client.Kill()

	rpcClient, err := client.Client()
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –º–æ–¥—É–ª—é: %w", err)
	}

	raw, err := rpcClient.Dispense("command")
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥—ã: %w", err)
	}

	module, ok := raw.(core.CommandModule)
	if !ok {
		return fmt.Errorf("–º–æ–¥—É–ª—å –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ—Ç CommandModule –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
	}

	fmt.Printf("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ %s:\n", path)
	fmt.Printf("- –ò–º—è: %s\n", module.Name())
	fmt.Printf("- –í–µ—Ä—Å–∏—è: %s\n", module.Version())
	fmt.Println("- –ö–æ–º–∞–Ω–¥—ã:")
	for _, cmd := range module.GetCommands() {
		fmt.Printf("  * %s - %s\n", cmd.Use, cmd.Short)
	}

	return nil
}

func loadModules() {
	fm, err := core.NewFileManager()
	if err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å FileManager: %v", err)
		return
	}

	if err := core.GetModuleManager().LoadModulesFromDir(fm.ModulesDir()); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π: %v", err)
	}
}
func init() {
	cobra.OnInitialize(initConfig, initLogger, loadModules)
	diffCmd.Flags().BoolVarP(&fastMode, "fast", "f", false, "–¢–æ–ª—å–∫–æ –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤")
	rootCmd.AddCommand(diffCmd)
	cobra.OnInitialize(initConfig, initLogger, loadModules)
	rootCmd.AddCommand(validateCmd)
	rootCmd.AddCommand(findCmd)
	rootCmd.AddCommand(patchCmd)
	rootCmd.AddCommand(statsCmd)
	rootCmd.SetHelpCommand(helpCmd)
	rootCmd.AddCommand(helpCmd)
	cobra.OnInitialize(initConfig)
	rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "–ö–æ–Ω—Ñ–∏–≥ (default: ~/.rlm-cli/config.yaml)")
	rootCmd.AddCommand(saveScenarioCmd)
	rootCmd.AddCommand(authCmd)
	rootCmd.AddCommand(statusCmd)
	applyCmd.Flags().BoolP("rlm", "r", false, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RLM —Å—Ü–µ–Ω–∞—Ä–∏–π")
	rootCmd.AddCommand(applyCmd)
	logsCmd.Flags().Int("tail", 0, "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ (0 - –≤—Å–µ –ª–æ–≥–∏)")
	rootCmd.AddCommand(logsCmd)
	rootCmd.AddCommand(listModulesCmd)
	rootCmd.AddCommand(installCmd)
	moduleManager := core.GetModuleManager()
	for _, cmd := range moduleManager.GetCommands() {
		rootCmd.AddCommand(cmd)
	}
}
